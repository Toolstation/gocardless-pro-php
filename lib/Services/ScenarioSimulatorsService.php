<?php
/**
 * WARNING: Do not edit by hand, this file was generated by Crank:
 *
 * https://github.com/gocardless/crank
 */

namespace GoCardlessPro\Services;

use \GoCardlessPro\Core\Paginator;
use \GoCardlessPro\Core\Util;
use \GoCardlessPro\Core\ListResponse;
use \GoCardlessPro\Resources\ScenarioSimulator;
use \GoCardlessPro\Core\Exception\InvalidStateException;


/**
 * Service that provides access to the ScenarioSimulator
 * endpoints of the API
 *  @method list()
 *  @method run()
 */
class ScenarioSimulatorsService extends BaseService
{

    protected $envelope_key   = 'scenario_simulators';
    protected $resource_class = '\GoCardlessPro\Resources\ScenarioSimulator';


    /**
    * List available scenario simulators
    *
    * Example URL: /scenario_simulators
    *
    * @param  string[mixed] $params An associative array for any params
    * @return ListResponse
    **/
    protected function _doList($params = array())
    {
        $path = "/scenario_simulators";
        if(isset($params['params'])) { $params['query'] = $params['params'];
          unset($params['params']);
        }

        
        $response = $this->api_client->get($path, $params);
        

        return $this->getResourceForResponse($response);
    }

    /**
    * Simulate a scenario
    *
    * Example URL: /scenario_simulators/:identity/actions/run
    *
    * @param  string        $identity The unique identifier of the simulator, used to initiate
 simulations. One of:
 <ul>
 <li>`creditor_verification_status_action_required`</li>
 <li>`creditor_verification_status_in_review`</li>
 <li>`creditor_verification_status_successful`</li>
 <li>`payment_paid_out`</li>
 <li>`payment_failed`</li>
 <li>`payment_charged_back`</li>
 <li>`payment_late_failure`</li>
 <li>`payment_late_failure_settled`</li>
 <li>`payment_submitted`</li>
 <li>`mandate_activated`</li>
 <li>`mandate_failed`</li>
 <li>`mandate_expired`</li>
 <li>`mandate_transferred`</li>
 <li>`refund_paid`</li>
 <li>`payout_bounced`</li>
 </ul>
    * @param  string[mixed] $params An associative array for any params
    * @return ScenarioSimulator
    **/
    public function run($identity, $params = array())
    {
        $path = Util::subUrl(
            '/scenario_simulators/:identity/actions/run',
            array(
                
                'identity' => $identity
            )
        );
        if(isset($params['params'])) { 
          $params['body'] = json_encode(array("data" => (object)$params['params']));
        
          unset($params['params']);
        }

        
        $response = $this->api_client->post($path, $params);
        

        return $this->getResourceForResponse($response);
    }

    /**
    * List available scenario simulators
    *
    * Example URL: /scenario_simulators
    *
    * @param string[mixed] $params
    * @return Paginator
    **/
    public function all($params = array())
    {
        return new Paginator($this, $params);
    }

}
